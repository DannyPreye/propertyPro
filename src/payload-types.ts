/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    properties: Property;
    tenants: Tenant;
    organizations: Organization;
    units: Unit;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    properties: PropertiesSelect<false> | PropertiesSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    organizations: OrganizationsSelect<false> | OrganizationsSelect<true>;
    units: UnitsSelect<false> | UnitsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName?: string | null;
  lastName?: string | null;
  organization?: (string | null) | Organization;
  phone?: string | null;
  role: 'admin' | 'manager' | 'user';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizations".
 */
export interface Organization {
  id: string;
  name: string;
  slug: string;
  contact?: {
    email?: string | null;
    phone?: string | null;
    address?: string | null;
  };
  description?: string | null;
  companySize?: ('1-10' | '11-50' | '51-100' | '101-500' | '501-1000') | null;
  domain?: string | null;
  branding?: {
    logo?: (string | null) | Media;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    theme?: ('light' | 'dark' | 'system') | null;
    accentColor?: string | null;
  };
  settings?: {
    allowTenantPortal?: boolean | null;
    enableMaintenanceRequests?: boolean | null;
    paymentMethods?: ('bank' | 'card' | 'cash')[] | null;
  };
  socialLinks?:
    | {
        name: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "properties".
 */
export interface Property {
  id: string;
  name: string;
  organization: string | Organization;
  address: {
    street: string;
    city: string;
    state: string;
    zip: string;
    geolocation?: {
      latitude?: number | null;
      longitude?: number | null;
    };
  };
  images?:
    | {
        image: string | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  amenities?:
    | {
        name: string;
        icon?: string | null;
        id?: string | null;
      }[]
    | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  status?: ('active' | 'maintenance' | 'inactive' | 'occupied' | 'vacant') | null;
  propertyType: 'apartment' | 'house' | 'condo' | 'townhouse' | 'commercial';
  rentalDetails: {
    rentAmount: number;
    securityDeposit?: number | null;
    availableFrom?: string | null;
    leaseTerms?: ('6_months' | '12_months' | 'month_to_month') | null;
  };
  utilities?: {
    includedUtilities?:
      | {
          utility?: ('water' | 'electricity' | 'gas' | 'internet' | 'trash') | null;
          id?: string | null;
        }[]
      | null;
    utilityEstimates?:
      | {
          utility?: ('water' | 'electricity' | 'gas' | 'internet' | 'trash') | null;
          estimatedMonthlyCost?: number | null;
          id?: string | null;
        }[]
      | null;
  };
  currentTenant?: (string | null) | User;
  maintenanceHistory?:
    | {
        date: string;
        description: string;
        performedBy?: string | null;
        cost?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  name: string;
  email: string;
  phone?: string | null;
  unit?: (string | null) | Unit;
  documents?:
    | {
        document?: (string | null) | Media;
        type?: ('id' | 'income' | 'references' | 'other') | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "units".
 */
export interface Unit {
  id: string;
  unitNumber: string;
  property: string | Property;
  type?: ('studio' | '1bed' | '2bed' | '3bed' | '4plus') | null;
  status?: ('available' | 'occupied' | 'maintenance' | 'reserved') | null;
  features?:
    | {
        feature?: string | null;
        id?: string | null;
      }[]
    | null;
  rent: {
    amount: number;
    utilities?: ('water' | 'electricity' | 'gas' | 'internet')[] | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'properties';
        value: string | Property;
      } | null)
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'organizations';
        value: string | Organization;
      } | null)
    | ({
        relationTo: 'units';
        value: string | Unit;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  organization?: T;
  phone?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "properties_select".
 */
export interface PropertiesSelect<T extends boolean = true> {
  name?: T;
  organization?: T;
  address?:
    | T
    | {
        street?: T;
        city?: T;
        state?: T;
        zip?: T;
        geolocation?:
          | T
          | {
              latitude?: T;
              longitude?: T;
            };
      };
  images?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  amenities?:
    | T
    | {
        name?: T;
        icon?: T;
        id?: T;
      };
  description?: T;
  status?: T;
  propertyType?: T;
  rentalDetails?:
    | T
    | {
        rentAmount?: T;
        securityDeposit?: T;
        availableFrom?: T;
        leaseTerms?: T;
      };
  utilities?:
    | T
    | {
        includedUtilities?:
          | T
          | {
              utility?: T;
              id?: T;
            };
        utilityEstimates?:
          | T
          | {
              utility?: T;
              estimatedMonthlyCost?: T;
              id?: T;
            };
      };
  currentTenant?: T;
  maintenanceHistory?:
    | T
    | {
        date?: T;
        description?: T;
        performedBy?: T;
        cost?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  phone?: T;
  unit?: T;
  documents?:
    | T
    | {
        document?: T;
        type?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizations_select".
 */
export interface OrganizationsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  contact?:
    | T
    | {
        email?: T;
        phone?: T;
        address?: T;
      };
  description?: T;
  companySize?: T;
  domain?: T;
  branding?:
    | T
    | {
        logo?: T;
        primaryColor?: T;
        secondaryColor?: T;
        theme?: T;
        accentColor?: T;
      };
  settings?:
    | T
    | {
        allowTenantPortal?: T;
        enableMaintenanceRequests?: T;
        paymentMethods?: T;
      };
  socialLinks?:
    | T
    | {
        name?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "units_select".
 */
export interface UnitsSelect<T extends boolean = true> {
  unitNumber?: T;
  property?: T;
  type?: T;
  status?: T;
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  rent?:
    | T
    | {
        amount?: T;
        utilities?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}